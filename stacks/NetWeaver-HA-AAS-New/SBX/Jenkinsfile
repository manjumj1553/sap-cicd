import groovy.json.JsonOutput
pipeline {
    agent any
    
    environment {
        GOOGLE_APPLICATION_CREDENTIALS = credentials('gcp-key-new')
        GIT_REPO_URL = "github.com/haprcr/sap-cicd-devops"
        GIT_USER_EMAIL = "mahekar@google.com"
        GIT_USER_NAME = "mahekar"
        TF_FOLDER = "stacks/NetWeaver-HA-AAS-New/tf"
        ANSIBLE_ROLES_PATH = "${env.WORKSPACE}/ansible/roles"
        ANSIBLE_FOLDER = "stacks/NetWeaver-HA-AAS-New"
        GIT_FOLDER = "stacks/NetWeaver-HA-AAS-New/SBX"
        ANSIBLE_PRIVATE_KEY = "/var/lib/jenkins/.ssh/id_rsa"
        deployvars_filename = "deploy-vars.yml"
        BUCKET_ID_FILES = "nw_ha_aas_cicd"

        PROJECT_ID = "sap-iac-test"
        SUBNETWORK_PROJECT = "sap-iac-test"
        SOURCE_IMAGE_NAME = "rhel-9-2-sap-v20241210"
        SOURCE_IMAGE_PROJECT = "rhel-sap-cloud"
        TERRAFORM_BUCKET_ID = "bucket-cicd-jenkins"
        TERRAFORM_PREFIX_ID = "nwhaaasjenkins25Apr2025"
        SSH_USER = "mahekar"
        GCE_SSH_PUB_KEY_FILE = "~/.ssh/id_rsa.pub"

        SAP_NW_AAS_BOOT_DISK_SIZE = "30"
        SAP_NW_AAS_BOOT_DISK_TYPE = "pd-ssd"
        SAP_NW_AAS_USRSAP_DISK_SIZE = "50"
        SAP_NW_AAS_USRSAP_DISK_TYPE = "pd-ssd"
        SAP_NW_AAS_SWAP_DISK_SIZE = "2"
        SAP_NW_AAS_SWAP_DISK_TYPE = "pd-ssd"
        SAP_NW_AAS_AUTODELETE_BOOT_DISK = "true"
        SAP_NW_AASSERVICE_ACCOUNT_EMAIL = "811811474621-compute@developer.gserviceaccount.com"
        SAP_NW_AAS_NETWORK_TAGS = "sap-allow-all"
        SAP_NW_AAS_PD_KMS_KEY = "projects/sap-iac-test/locations/global/keyRings/paypal-ring/cryptoKeys/paypal-key"
        SAP_NW_AAS_CREATE_INSTANCE_GROUP = "false"  //Instance Group always false
        SAP_NW_AAS_INSTANCE_GROUP_NAME = ""

        sap_host_fqdn = "paypal.com"
        sap_nw_sidadm_uid = "1025"
        sap_nw_sapadm_uid = "1032"
        sap_sapsys_gid = "1028"
        sap_nw_sapsys_gid = "1028"
        sap_nw_install_files_bucket = "sap-deployment-media"
        sap_nw_create_nfs_source_dirs = "true"
        sap_nw_ascs_install_web_dispatcher = "false"
        sap_nw_product_and_version = "BW4HANA/2023"
        sap_hana_password = "Paypal12345"
        sap_nw_password = "Paypal12345"
        sap_system_type = "nw"
        sap_primary_zone = "us-central1-a"
        sap_secondary_zone = "us-central1-b"
    }

    parameters {
        string(name: 'subnetwork', defaultValue: 'db-central', description: "Subnetwork name")
        string(name: 'sap_nw_aas_region', defaultValue: 'us-central1', description: "Region for Instance deployment")
        string(name: 'sap_nw_aas_zone_a', defaultValue: 'us-central1-a', description: "ZoneA for Instance deployment")
        string(name: 'sap_nw_aas_zone_b', defaultValue: 'us-central1-b', description: "ZoneB for Instance deployment")
        string(name: 'sap_nw_aas_instance_name_a', defaultValue: 'uscbwhaas01,uscbwhaas02', description: "List of instance hostnames in ZoneA (separated by commas)")
        string(name: 'sap_nw_aas_instance_ip_a', defaultValue: '10.5.0.50,10.5.0.51', description: "List of IP Addresses in ZoneA")
        string(name: 'sap_nw_aas_instance_name_b', defaultValue: 'uscbwhaas03,uscbwhaas04', description: "List of instance hostnames in ZoneB")
        string(name: 'sap_nw_aas_instance_ip_b', defaultValue: '10.5.0.52,10.5.0.53', description: "List of IP Addresses in ZoneB")
        choice(name: 'sap_nw_aas_instance_type', choices: ['n1-standard-8','n1-standard-4'],  
          description: 'Machine type for the NetWeaver-HA-AAS instance'
        )
        string(name: 'sap_nw_aas_labels', defaultValue: '{ env = "sbx" }', description: "Labels for the instance (key-value pairs)")
        string(name: 'sap_nw_aas_alias_name_a', defaultValue: 'uscbwhaasvip1,uscbwhaasvip2', description: "List of Alias/Virtual hostnames in ZoneA")
        string(name: 'sap_nw_aas_alias_ip_a', defaultValue: '10.5.0.55,10.5.0.56', description: "List of Alias IP for instances in ZoneA")
        string(name: 'sap_nw_aas_alias_name_b', defaultValue: 'uscbwhaasvip3,uscbwhaasvip4', description: "List of Alias/Virtual hostnames in ZoneB")
        string(name: 'sap_nw_aas_alias_ip_b', defaultValue: '10.5.0.57,10.5.0.61', description: "List of Alias IP for instances in ZoneB")

        string(name: 'sap_ascs_instance_name', defaultValue: 'uscbwhascs01', description: "ASCS Instance Name")
        string(name: 'sap_nw_ascs_virtual_host', defaultValue: 'uscbwhascsvip', description: "ASCS Virtual Hostname")
        string(name: 'sap_nw_ascs_vip', defaultValue: '10.5.0.28', description: "ASCS Virtual IP")
        string(name: 'sap_ers_instance_name', defaultValue: 'uscbwhers01', description: "ERS Instance Name")
        string(name: 'sap_nw_ers_virtual_host', defaultValue: 'uscbwhersvip', description: "ERS Virtual Hostname")
        string(name: 'sap_nw_ers_vip', defaultValue: '10.5.0.31', description: "ERS Virtual IP")
        string(name: 'sap_pas_instance_name', defaultValue: 'uscbwhpas01', description: "PAS Instance Name")
        string(name: 'sap_nw_pas_virtual_host', defaultValue: 'uscbwhpasvip', description: "PAS Virtual Hostname")
        string(name: 'sap_nw_pas_alias_ip', defaultValue: '10.5.0.24', description: "PAS Virtual/Alias IP")
        string(name: 'sap_hana_virtual_host', defaultValue: 'usch8phdb', description: "HANA Virtual Hostname")
        string(name: 'sap_hana_ilb_ip', defaultValue: '10.5.0.12', description: "HANA Virtual/ILB IP")

        string(name: 'sap_nw_nfs_src', defaultValue: '10.167.224.4:/paypalvol1/BWH', description: "NFS Server Path")
        string(name: 'sap_nw_sid', defaultValue: 'BWH', description: "System ID of NetWeaver-HA")
        string(name: 'sap_hana_sid', defaultValue: 'H8P', description: "System ID of HANA-HA")
        string(name: 'sap_nw_ascs_instance_number', defaultValue: '00', description: "ASCS Instance Number")
        string(name: 'sap_nw_ers_instance_number', defaultValue: '10', description: "ERS Instance Number")
        string(name: 'sap_nw_pas_instance_number', defaultValue: '00', description: "PAS Instance Number")
        string(name: 'sap_hana_instance_number', defaultValue: '00', description: "PAS Instance Number")
    }


    stages {
        stage('Prepare TF variable file') {
            steps {
                script {
                    def paramsMap = [:]

                    params.each { key, value ->
                        if  (key == 'sap_nw_aas_labels') {
                            def parts = value.split('=')
                            if (parts.size() == 2) {
                                paramsMap[key] = [(parts[0].replaceAll('[\\{\\s]+','').trim()): parts[1].replaceAll('[\\}\\s"]+','').trim()]
                            }
                            else
                            {
                                paramsMap[key] = value
                            }
                        } else if (key == 'sap_nw_aas_instance_ip_a' || key == 'sap_nw_aas_instance_ip_b' || key == 'sap_nw_aas_alias_ip_a' || key == 'sap_nw_aas_alias_ip_b' ) {
                            paramsMap[key] = value.split(',').collect { it.trim() }
                        } else if (key == 'sap_nw_aas_instance_name_a' || key == 'sap_nw_aas_instance_name_b' || key == 'sap_nw_aas_alias_name_a' || key == 'sap_nw_aas_alias_name_b' ) {
                            paramsMap[key] = value.split(',').collect { it.trim() }
                        } else if (key == 'subnetwork') {
                            paramsMap[key] = value
                        } else {
                            paramsMap[key] = value
                        }
                    }

                    // Add environment variables
                    paramsMap['project_id'] = env.PROJECT_ID 
                    paramsMap['subnetwork_project'] = env.SUBNETWORK_PROJECT
                    paramsMap['source_image_name'] = env.SOURCE_IMAGE_NAME
                    paramsMap['source_image_project'] = env.SOURCE_IMAGE_PROJECT
                    paramsMap['gce_ssh_user'] = env.SSH_USER
                    paramsMap['gce_ssh_pub_key_file'] = env.GCE_SSH_PUB_KEY_FILE

                    paramsMap['sap_nw_aas_boot_disk_size'] = env.SAP_NW_AAS_BOOT_DISK_SIZE
                    paramsMap['sap_nw_aas_boot_disk_type'] = env.SAP_NW_AAS_BOOT_DISK_TYPE
                    paramsMap['sap_nw_aas_autodelete_boot_disk'] = env.SAP_NW_AAS_AUTODELETE_BOOT_DISK ? env.SAP_NW_AAS_AUTODELETE_BOOT_DISK : true
                    paramsMap['sap_nw_aas_usrsap_disk_size'] = env.SAP_NW_AAS_USRSAP_DISK_SIZE
                    paramsMap['sap_nw_aas_usrsap_disk_type'] = env.SAP_NW_AAS_USRSAP_DISK_TYPE
                    paramsMap['sap_nw_aas_swap_disk_size'] = env.SAP_NW_AAS_SWAP_DISK_SIZE
                    paramsMap['sap_nw_aas_swap_disk_type'] = env.SAP_NW_AAS_SWAP_DISK_TYPE
                    paramsMap['sap_nw_aas_service_account_email'] = env.SAP_NW_AAS_SERVICE_ACCOUNT_EMAIL
                    paramsMap['sap_nw_aas_network_tags'] = [env.SAP_NW_AAS_NETWORK_TAGS]
                    paramsMap['sap_nw_aas_pd_kms_key'] = env.SAP_NW_AAS_PD_KMS_KEY
                    paramsMap['sap_nw_aas_create_instance_group'] = env.SAP_NW_AAS_CREATE_INSTANCE_GROUP
                    paramsMap['sap_nw_aas_instance_group_name'] = env.SAP_NW_AAS_INSTANCE_GROUP_NAME

                    writeFile file: "${env.TF_FOLDER}/terraform.tfvars.json", text: JsonOutput.prettyPrint(JsonOutput.toJson(paramsMap)) 
                }
            }
        }

        stage('Terraform Plan and Approve') {
            steps {
                script {
                    def bucketId = "${env.TERRAFORM_BUCKET_ID}"
                    def prefixId = "${env.TERRAFORM_PREFIX_ID}"

                    if (!bucketId || !prefixId) {
                        error "Bucket and prefix ID not found for ${TF_FOLDER}"
                    }

                    echo "Executing Terraform init and plan in ${TF_FOLDER} with backend bucket=${bucketId}, prefix=${prefixId}"

                    withCredentials([file(credentialsId: 'gcp-key-new', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                    dir("${TF_FOLDER}") {
                                        sh "cat terraform.tfvars.json"

                                        sh """
                                            terraform init \\
                                                -backend-config="bucket=${bucketId}" \\
                                                -backend-config="prefix=${prefixId}" \\
                                                -reconfigure
                                        """

                                        // Capture Terraform plan output into a file
                                        sh "terraform plan -var-file=terraform.tfvars.json -compact-warnings | tee terraform-plan.log"

                                        
                        }
                    
                    def approverEmail = 'mayuri.ym94@gmail.com'
                    def subject = "Approval Required: Terraform Execution"
                    def logFilePath = "${TF_FOLDER}/terraform-plan.log"

                    // Read Terraform Plan Output and truncate if too long
                    def planOutput = readFile(logFilePath)
                    // .take(5000) // Limits email size

                    def body = """
                        <p>Terraform execution is requested. Please review and approve or reject.</p>
                        
                        <p><b>Job:</b> ${env.JOB_NAME}<br>
                        <b>Build Number:</b> ${env.BUILD_NUMBER}<br>
                        <b>URL:</b> <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>

                        <p><b>Terraform Plan Output (truncated):</b></p>
                        <pre>${planOutput}</pre>

                        <p><b>Approval Options:</b></p>
                        <ul>
                            <li><a href="${env.BUILD_URL}/input">✅ Approve Job</a></li>
                            <li><a href="${env.BUILD_URL}/abort">❌ Reject Job</a></li>
                        </ul>
                    """

                    mail(
                        to: approverEmail,
                        subject: subject,
                        body: body,
                        mimeType: 'text/html'
                    )
                }


                input message: "Do you want to proceed with Terraform Configuration Deployment?", ok: "Proceed"

                    withCredentials([file(credentialsId: 'gcp-key-new', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                        dir("${TF_FOLDER}") {
                            sh "terraform apply -auto-approve -var-file=\"terraform.tfvars.json\""
                        }
                    }

                    sh """
                        echo "Fetching Terraform state file from GCS..."
                        gsutil cat gs://${env.TERRAFORM_BUCKET_ID}/${env.TERRAFORM_PREFIX_ID}/default.tfstate
                    """
                }
            }
        }


        stage('Prepare Host Inventory') {
            steps {
                script {
                    dir("${TF_FOLDER}") {
                            echo "Extracting Terraform output for ${TF_FOLDER}"

                            // Get Terraform JSON output
                            def terraformOutput = sh(script: 'terraform output -json', returnStdout: true).trim()
                            def jsonOutput = readJSON(text: terraformOutput)

                            // Extracting values properly
                            def inventoryList = jsonOutput.inventory?.value ?: []
                            def zoneAInstanceUrlList = jsonOutput.aas_instance_name_a?.value ?: []
                            def zoneBInstanceUrlList = jsonOutput.aas_instance_name_b?.value ?: []
                            def instanceUrlList = zoneAInstanceUrlList + zoneBInstanceUrlList

                            if (inventoryList.isEmpty() || zoneAInstanceUrlList.isEmpty() || zoneBInstanceUrlList.isEmpty()) {
                                error "Error: Required Terraform outputs are missing"
                            }

                            // Build host -> instance_name mapping
                            def hostInfoMap = [:]
                            inventoryList.eachWithIndex { item, index ->
                                def ip = item.host
                                def isAASValue = item.vars["sap_is_aas"] == true
                                def instanceName = instanceUrlList[index].tokenize('/').last()
                                hostInfoMap[ip] = [instanceName: instanceName, isAAS: isAASValue]
                            }

                            def groupName = inventoryList[0]?.groups[0] ?: "nw"
                            def yamlContent = "all:\n  children:\n    ${groupName}:\n      hosts:\n"

                            hostInfoMap.each { ip, hostInfo ->
                                yamlContent += "        ${ip}:\n          instance_name: ${hostInfo.instanceName}\n          sap_is_aas: ${hostInfo.isAAS}\n"
                            }

                            def yamlFilePath = "${env.WORKSPACE}/${env.ANSIBLE_FOLDER}/inventory.yml"
                            writeFile file: yamlFilePath, text: yamlContent

                            echo "Inventory YAML file created at ${yamlFilePath}"
                        }
                }
            }
        }

        stage('Prepare Ansible Input Vars File') {
            steps {
                script {

                    input message: "Do you want to proceed with Ansible Execution?", ok: "Proceed"

                    def yamlContent = """
                        sap_project_id: ${env.PROJECT_ID}
                        sap_host_fqdn: "${env.sap_host_fqdn}"
                        sap_hana_ilb_ip: "${params.sap_hana_ilb_ip}"
                        sap_nw_ascs_vip: "${params.sap_nw_ascs_vip}"
                        sap_nw_ers_vip: "${params.sap_nw_ers_vip}"
                        sap_nw_pas_alias_ip: "${params.sap_nw_pas_alias_ip}"
                        sap_nw_aas_alias_ip_a: ${params.sap_nw_aas_alias_ip_a.split(',').collect { it.trim() }}
                        sap_nw_aas_alias_ip_b: ${params.sap_nw_aas_alias_ip_b.split(',').collect { it.trim() }}
                        sap_nw_aas_alias_name_a: ${params.sap_nw_aas_alias_name_a.split(',').collect { it.trim() }}
                        sap_nw_aas_alias_name_b: ${params.sap_nw_aas_alias_name_b.split(',').collect { it.trim() }}
                        sap_nw_aas_instance_ip_a: ${params.sap_nw_aas_instance_ip_a.split(',').collect { it.trim()}}
                        sap_nw_aas_instance_ip_b: ${params.sap_nw_aas_instance_ip_b.split(',').collect { it.trim()}}
                        sap_ascs_instance_name: ${params.sap_ascs_instance_name}
                        sap_ers_instance_name: ${params.sap_ers_instance_name}
                        sap_pas_instance_name: ${params.sap_pas_instance_name}
                        sap_hana_virtual_host:  ${params.sap_hana_virtual_host}
                        sap_nw_ascs_virtual_host:  ${params.sap_nw_ascs_virtual_host}
                        sap_nw_ers_virtual_host:  ${params.sap_nw_ers_virtual_host}
                        sap_nw_pas_virtual_host:  ${params.sap_nw_pas_virtual_host}
                        sap_primary_zone: "${env.sap_primary_zone}"
                        sap_secondary_zone: "${env.sap_secondary_zone}"
                        sap_nw_sidadm_uid: ${env.sap_nw_sidadm_uid}
                        sap_nw_sapadm_uid: ${env.sap_nw_sapadm_uid}
                        sap_sapsys_gid: ${env.sap_sapsys_gid}
                        sap_nw_install_files_bucket: ${env.sap_nw_install_files_bucket}
                        sap_nw_nfs_src: ${params.sap_nw_nfs_src}
                        sap_nw_create_nfs_source_dirs: ${env.sap_nw_create_nfs_source_dirs}
                        sap_nw_sid: ${params.sap_nw_sid} 
                        sap_hana_sid: ${params.sap_hana_sid} 
                        sap_hana_instance_number: "${params.sap_hana_instance_number}"
                        sap_nw_ascs_instance_number: "${params.sap_nw_ascs_instance_number}"
                        sap_nw_ers_instance_number: "${params.sap_nw_ers_instance_number}"
                        sap_nw_pas_instance_number: "${params.sap_nw_pas_instance_number}"
                        sap_nw_ascs_install_web_dispatcher: ${env.sap_nw_ascs_install_web_dispatcher}
                        sap_nw_product_and_version: ${env.sap_nw_product_and_version}
                        sap_nw_password: "${env.sap_nw_password}"
                        sap_hana_password: "${env.sap_hana_password}"
                        sap_system_type: "${env.sap_system_type}"
                    """.stripIndent()
                    
                    sh "mkdir -p ${env.ANSIBLE_FOLDER}/vars"

                    writeFile file: "${env.ANSIBLE_FOLDER}/vars/deploy-vars.yml", text: yamlContent

                }
            }
        }

        stage('Wait for SSH Connection to All Hosts') {
            steps {
                script {
                            def connectedHosts = [] as Set  // Use a Set to avoid duplicates
                            def retryCount = 0
                            def maxRetries = 5  // Maximum retry attempts
                            def retryDelay = 40 // Delay between retries (seconds)

                            // Read the inventory.yml file as YAML
                            def inventoryData = readYaml file: "${env.ANSIBLE_FOLDER}/inventory.yml"
                            def inventoryHosts = []

                            // Navigate through YAML to extract host IPs
                            if (inventoryData?.all?.children?.nw?.hosts) {
                                inventoryHosts = inventoryData.all.children.nw.hosts.keySet().toList()
                            } else {
                                error "No hosts found in inventory.yml!"
                            }

                            echo "Hosts from inventory: ${inventoryHosts}"

                            def sshUser = env.SSH_USER
                            echo "Using SSH User: ${sshUser}"

                            while (connectedHosts.size() < inventoryHosts.size() && retryCount < maxRetries) {
                                def remainingHosts = inventoryHosts - connectedHosts  // Hosts that still need checking

                                for (host in remainingHosts) {
                                    echo "Attempting SSH connection to ${sshUser}@${host}, try #${retryCount + 1}"
                                    def result = sh(script: "ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 ${sshUser}@${host} 'exit'", returnStatus: true)

                                    if (result == 0) {
                                        echo "SSH connection successful for ${host}"
                                        connectedHosts.add(host)
                                    } else {
                                        echo "SSH connection failed for ${host}. Moving to the next host..."
                                    }
                                }

                                retryCount++
                                if (connectedHosts.size() < inventoryHosts.size() && retryCount < maxRetries) {
                                    sleep(retryDelay)
                                }
                            }

                            // Fail if any hosts remain unreachable
                            if (connectedHosts.size() < inventoryHosts.size()) {
                                error "Failed to connect to some hosts after ${maxRetries} attempts: ${(inventoryHosts - connectedHosts)}"
                            } else {
                                echo "All hosts are reachable. Proceeding with Ansible playbook execution."
                            }
                        }
                    }
                }

        
        stage("Execute Ansible"){
            steps {
                script {
                    // Send mail for ansible execution
                    def teamEmail = 'mayuri.ym94@gmail.com'
                    def subject_exe = "Initiation of NetWeaver-HA-AAS deployment"

                    def body_exe = """
                        <html>
                        <body>
                            <p>Dear Team,</p>
                            <p>The deployment of <strong>NetWeaver-HA-AAS system</strong> in the <strong>Sandbox</strong> environment has been initiated from the Jenkins UI. Please find the build information below:</p>

                            <ul>
                                <li><strong>Job:</strong> ${env.JOB_NAME}</li>
                                <li><strong>Build Number:</strong> ${env.BUILD_NUMBER}</li>
                                <li><strong>Build URL:</strong> <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></li>
                            </ul>

                            <p>Regards,</p>
                        </body>
                        </html>
                    """

                    mail(
                        to: teamEmail,
                        subject: subject_exe,
                        body: body_exe,
                        mimeType: 'text/html'
                    )
                    dir("${ANSIBLE_FOLDER}") {

                            ansiblePlaybook(
                                disableHostKeyChecking: true,
                                installation: 'Ansible',
                                inventory: "inventory.yml",
                                playbook: "playbook.yml",
                                extras: "-e @vars/${deployvars_filename}",
                                extraVars: [
                                    "ansible_ssh_private_key_file": ANSIBLE_PRIVATE_KEY,
                                    "ansible_user": SSH_USER
                                ]
                            )
                    }

                    def yamlContent = """
                        sap_project_id: ${env.PROJECT_ID}
                        sap_host_fqdn: "${env.sap_host_fqdn}"
                        sap_hana_ilb_ip: "${params.sap_hana_ilb_ip}"
                        sap_nw_ascs_vip: "${params.sap_nw_ascs_vip}"
                        sap_nw_ers_vip: "${params.sap_nw_ers_vip}"
                        sap_nw_pas_alias_ip: "${params.sap_nw_pas_alias_ip}"
                        sap_nw_aas_alias_ip_a: ${params.sap_nw_aas_alias_ip_a.split(',').collect { it.trim() }}
                        sap_nw_aas_alias_ip_b: ${params.sap_nw_aas_alias_ip_b.split(',').collect { it.trim() }}
                        sap_nw_aas_alias_name_a: ${params.sap_nw_aas_alias_name_a.split(',').collect { it.trim() }}
                        sap_nw_aas_alias_name_b: ${params.sap_nw_aas_alias_name_b.split(',').collect { it.trim() }}
                        sap_nw_aas_instance_ip_a: ${params.sap_nw_aas_instance_ip_a.split(',').collect { it.trim()}}
                        sap_nw_aas_instance_ip_b: ${params.sap_nw_aas_instance_ip_b.split(',').collect { it.trim()}}
                        sap_ascs_instance_name: ${params.sap_ascs_instance_name}
                        sap_ers_instance_name: ${params.sap_ers_instance_name}
                        sap_pas_instance_name: ${params.sap_pas_instance_name}
                        sap_hana_virtual_host:  ${params.sap_hana_virtual_host}
                        sap_nw_ascs_virtual_host:  ${params.sap_nw_ascs_virtual_host}
                        sap_nw_ers_virtual_host:  ${params.sap_nw_ers_virtual_host}
                        sap_nw_pas_virtual_host:  ${params.sap_nw_pas_virtual_host}
                        sap_primary_zone: "${env.sap_primary_zone}"
                        sap_secondary_zone: "${env.sap_secondary_zone}"
                        sap_nw_sidadm_uid: ${env.sap_nw_sidadm_uid}
                        sap_nw_sapadm_uid: ${env.sap_nw_sapadm_uid}
                        sap_sapsys_gid: ${env.sap_sapsys_gid}
                        sap_nw_install_files_bucket: ${env.sap_nw_install_files_bucket}
                        sap_nw_nfs_src: ${params.sap_nw_nfs_src}
                        sap_nw_create_nfs_source_dirs: ${env.sap_nw_create_nfs_source_dirs}
                        sap_nw_sid: ${params.sap_nw_sid} 
                        sap_hana_sid: ${params.sap_hana_sid} 
                        sap_hana_instance_number: "${params.sap_hana_instance_number}"
                        sap_nw_ascs_instance_number: "${params.sap_nw_ascs_instance_number}"
                        sap_nw_ers_instance_number: "${params.sap_nw_ers_instance_number}"
                        sap_nw_pas_instance_number: "${params.sap_nw_pas_instance_number}"
                        sap_nw_ascs_install_web_dispatcher: ${env.sap_nw_ascs_install_web_dispatcher}
                        sap_nw_product_and_version: ${env.sap_nw_product_and_version}
                        sap_system_type: "${env.sap_system_type}"
                    """.stripIndent()    

                    writeFile file: "${env.ANSIBLE_FOLDER}/vars/deploy-vars.yml", text: yamlContent

                    // Send mail for successful deployment
                    def subject_cmp = "NetWeaver-HA-AAS Deployment Successfully Completed in Sandbox environment"

                    def body_cmp= """
                        <html>
                        <body>
                            <p>Dear Team,</p>

                            <p>The deployment of NetWeaver-HA-AAS system has been successfully completed. Below are the details of the newly created instance:</p>

                            <table cellspacing="0" cellpadding="5" border="1" style="border-collapse: collapse;">
                                <tr><th align="left">AAS Instance Name - ZoneA</th><td>${params.sap_nw_aas_instance_name_a}</td></tr>
                                <tr><th align="left">Zone</th><td>${params.sap_nw_aas_zone_a}</td></tr>
                                <tr><th align="left">Private IP Address - ZoneB</th><td>${params.sap_nw_aas_instance_ip_a}</td></tr>
                            </table>
                            <br/>

                            <table cellspacing="0" cellpadding="5" border="1" style="border-collapse: collapse;">
                                <tr><th align="left">AAS Instance Name - ZoneB</th><td>${params.sap_nw_aas_instance_name_b}</td></tr>
                                <tr><th align="left">Zone</th><td>${params.sap_nw_aas_zone_b}</td></tr>
                                <tr><th align="left">Private IP Address - ZoneB</th><td>${params.sap_nw_aas_instance_ip_b}</td></tr>
                            </table>
                            <br/>

                            <p><strong>Build Information:</strong></p>
                            <ul>
                                <li><strong>Job:</strong> ${env.JOB_NAME}</li>
                                <li><strong>Build Number:</strong> ${env.BUILD_NUMBER}</li>
                                <li><strong>Build URL:</strong> <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></li>
                            </ul>

                            <p>Best regards</p>
                        </body>
                        </html>
                    """

                    mail(
                        to: teamEmail,
                        subject: subject_cmp,
                        body: body_cmp,
                        mimeType: 'text/html'
                    )
                }
            }
        }


        stage('Update TF variable file to remove the Password') {
            steps {
                script {
                    def paramsMap = [:]

                    params.each { key, value ->
                        if  (key == 'sap_nw_aas_labels') {
                            def parts = value.split('=')
                            if (parts.size() == 2) {
                                paramsMap[key] = [(parts[0].replaceAll('[\\{\\s]+','').trim()): parts[1].replaceAll('[\\}\\s"]+','').trim()]
                            }
                            else
                            {
                                paramsMap[key] = value
                            }
                        } else if (key == 'sap_nw_aas_instance_ip_a' || key == 'sap_nw_aas_instance_ip_b' || key == 'sap_nw_aas_alias_ip_a' || key == 'sap_nw_aas_alias_ip_b' ) {
                            paramsMap[key] = value.split(',').collect { it.trim() }
                        } else if (key == 'sap_nw_aas_instance_name_a' || key == 'sap_nw_aas_instance_name_b' || key == 'sap_nw_aas_alias_name_a' || key == 'sap_nw_aas_alias_name_b' ) {
                            paramsMap[key] = value.split(',').collect { it.trim() }
                        } else if (key == 'subnetwork') {
                            paramsMap[key] = value
                        } else {
                            paramsMap[key] = value
                        }
                    }

                    // Add environment variables
                    paramsMap['project_id'] = env.PROJECT_ID 
                    paramsMap['subnetwork_project'] = env.SUBNETWORK_PROJECT
                    paramsMap['source_image_name'] = env.SOURCE_IMAGE_NAME
                    paramsMap['source_image_project'] = env.SOURCE_IMAGE_PROJECT
                    paramsMap['gce_ssh_user'] = env.SSH_USER
                    paramsMap['gce_ssh_pub_key_file'] = env.GCE_SSH_PUB_KEY_FILE

                    paramsMap['sap_nw_aas_boot_disk_size'] = env.SAP_NW_AAS_BOOT_DISK_SIZE
                    paramsMap['sap_nw_aas_boot_disk_type'] = env.SAP_NW_AAS_BOOT_DISK_TYPE
                    paramsMap['sap_nw_aas_autodelete_boot_disk'] = env.SAP_NW_AAS_AUTODELETE_BOOT_DISK ? env.SAP_NW_AAS_AUTODELETE_BOOT_DISK : true
                    paramsMap['sap_nw_aas_usrsap_disk_size'] = env.SAP_NW_AAS_USRSAP_DISK_SIZE
                    paramsMap['sap_nw_aas_usrsap_disk_type'] = env.SAP_NW_AAS_USRSAP_DISK_TYPE
                    paramsMap['sap_nw_aas_swap_disk_size'] = env.SAP_NW_AAS_SWAP_DISK_SIZE
                    paramsMap['sap_nw_aas_swap_disk_type'] = env.SAP_NW_AAS_SWAP_DISK_TYPE
                    paramsMap['sap_nw_aas_service_account_email'] = env.SAP_NW_AAS_SERVICE_ACCOUNT_EMAIL
                    paramsMap['sap_nw_aas_network_tags'] = [env.SAP_NW_AAS_NETWORK_TAGS]
                    paramsMap['sap_nw_aas_pd_kms_key'] = env.SAP_NW_AAS_PD_KMS_KEY
                    paramsMap['sap_nw_aas_create_instance_group'] = env.SAP_NW_AAS_CREATE_INSTANCE_GROUP
                    paramsMap['sap_nw_aas_instance_group_name'] = env.SAP_NW_AAS_INSTANCE_GROUP_NAME

                    writeFile file: "${env.TF_FOLDER}/terraform.tfvars.json", text: JsonOutput.prettyPrint(JsonOutput.toJson(paramsMap)) 
                }
            }
        }


        stage('Add the files to Git Repository') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'github-key-new', variable: 'GIT_SECRET')]) {
                        def timestamp = new Date().format("yyyyMMddHHmmss")
                        def git_folder_name = "${params.sap_nw_sid}_${timestamp}"
                        def target_folder = "${env.GIT_FOLDER}/${git_folder_name}"
                        def tfvarsFile = "${env.TF_FOLDER}/terraform.tfvars.json"
                        def inventoryFile = "${env.ANSIBLE_FOLDER}/inventory.yml"
                        def deployvarsFile = "${env.ANSIBLE_FOLDER}/vars/deploy-vars.yml"

                        sh """
                            mkdir -p ${target_folder}
                            cp ${tfvarsFile} ${target_folder}/terraform.tfvars.json
                            cp ${inventoryFile} ${target_folder}/inventory.yml
                            cp ${deployvarsFile} ${target_folder}/deploy-vars.yml

                            git config user.name "${GIT_USER_NAME}"
                            git config user.email "${GIT_USER_EMAIL}"

                            git add ${target_folder}
                            git commit -m "Add deployment files for ${git_folder_name}" || echo 'No changes to commit'
                            git push https://${GIT_USER_NAME}:${GIT_SECRET}@${GIT_REPO_URL} HEAD:main
                        """
                    }
                }
            }
        }
    }

    post {
                // Clean after build
                always {
                    cleanWs(cleanWhenNotBuilt: false,
                            deleteDirs: true,
                            disableDeferredWipeout: true,
                            notFailBuild: true)
                }
    }
}