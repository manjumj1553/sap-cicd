import groovy.json.JsonOutput
pipeline {
    agent any
    
    environment {
        GOOGLE_APPLICATION_CREDENTIALS = credentials('gcp-key-new')
        GIT_REPO_URL = "github.com/haprcr/sap-cicd-devops"
        GIT_USER_EMAIL = "harshapriyacr@google.com"
        GIT_USER_NAME = "harshapriyacr"
        FOLDER = "stacks/HANA-Scaleup/SBX"
        ANSIBLE_ROLES_PATH = "${env.WORKSPACE}/ansible/roles"
        ANSIBLE_PRIVATE_KEY = "/var/lib/jenkins/.ssh/id_rsa"
        SSH_USER = "harshapriyacr"
        deployvars_filename = "deploy-vars.yml"
        BUCKET_ID_FILES = "hana_scaleup_cicd"
        TERRAFORM_BUCKET_ID = "bucket-cicd-jenkins"
        TERRAFORM_PREFIX_ID = "jenkins1Apr7687"
        sap_hana_backint_install = true
        sap_hana_backint_bucket_name = "sap-hana-state-bg-mj"
        sap_hana_install_files_bucket = "sap-deployment-media"
        // sap_hana_sid = "OHC"
        sap_hana_instance_number = "00"
        sap_hana_password = "Paypal12345"
        sap_host_fqdn = "paypal.com"
        sap_hana_fast_restart = true
        PROJECT_ID = "sap-iac-test"
        SUBNETWORK_PROJECT = "sap-iac-test"
        SOURCE_IMAGE_NAME = "rhel-9-2-sap-v20241210"
        SOURCE_IMAGE_PROJECT = "rhel-sap-cloud"
        GCE_SSH_PUB_KEY_FILE = "~/.ssh/id_rsa.pub"
        SAP_BOOT_DISK_SIZE = "50"
        SAP_BOOT_DISK_TYPE = "pd-ssd"
        SAP_AUTODELETE_BOOT_DISK = 'true'
        SAP_DATA_DISK_SIZE = "50"
        SAP_DATA_DISK_TYPE = "pd-ssd"
        SAP_LOG_DISK_SIZE = "50"
        SAP_LOG_DISK_TYPE = "pd-ssd"
        SAP_SHARED_DISK_SIZE = "50"
        SAP_SHARED_DISK_TYPE = "pd-ssd"
        SAP_USRSAP_DISK_SIZE = "32"
        SAP_USRSAP_DISK_TYPE = "pd-ssd"
        SAP_SWAP_DISK_SIZE = "2"
        SAP_SWAP_DISK_TYPE = "pd-ssd"
        SAP_SERVICE_ACCOUNT_EMAIL = "811811474621-compute@developer.gserviceaccount.com"
        SAP_NETWORK_TAGS = "sap-allow-all"
        SAP_PD_KMS_KEY = "projects/sap-iac-test/locations/global/keyRings/paypal-ring/cryptoKeys/paypal-key"
    }

    parameters {
        string(name: 'subnetwork', defaultValue: 'db-central', description: "Subnetwork name")
        string(name: 'sap_zone', defaultValue: 'us-central1-a', description: "SAP deployment zone")
        string(name: 'sap_instance_name', defaultValue: 'hanascaleup04', description: "SAP instance name")
        string(name: 'sap_instance_ip', defaultValue: '10.5.0.110', description: "SAP instance private IP")
        choice(name: 'sap_instance_type', choices: ['n1-highmem-32'],  
          description: 'Machine type'
        ) 
        string(name: 'sap_addon_disk_name', defaultValue: 'lssshared', description: "SAP additional disk name")
        string(name: 'sap_addon_disk_size_gb', defaultValue: '50', description: "SAP additional disk size in GB")
        string(name: 'sap_addon_disk_type', defaultValue: 'pd-ssd', description: "SAP additional disk type")
        string(name: 'sap_labels', defaultValue: '{ app = "hana" }', description: "Labels for the SAP instance (key-value pairs)")
        string(name: 'sap_hana_sid', defaultValue: 'OHC', description: "System ID of SAP HANA system")
    }


    stages {
        stage('Prepare TF variable file') {
            steps {
                script {
                    def paramsMap = [:]

                    params.each { key, value ->
                        switch (key) {
                            case 'sap_network_tags':
                                try {
                                    paramsMap[key] = readJSON(text: value)
                                } catch (Exception e) {
                                    error("Invalid JSON format for sap_network_tags: ${value}")
                                }
                                break

                            case 'sap_labels':
                                try {
                                    paramsMap[key] = readJSON(text: value)
                                } catch (Exception e) {
                                    error("Invalid JSON format for sap_labels: ${value}")
                                }
                                break

                            case ['sap_addon_disk_name', 'sap_addon_disk_size_gb', 'sap_addon_disk_type']:
                                if (!paramsMap.containsKey('sap_addon_disks')) {
                                    paramsMap['sap_addon_disks'] = [:]
                                }
                                paramsMap['sap_addon_disks']['name'] = [params['sap_addon_disk_name']]
                                paramsMap['sap_addon_disks']['disk_size_gb'] = [params['sap_addon_disk_size_gb'].toInteger()]
                                paramsMap['sap_addon_disks']['disk_type'] = [params['sap_addon_disk_type']]
                                break

                            default:
                                paramsMap[key] = value
                        }
                    }

                    // Add environment variables
                    paramsMap['project_id'] = env.PROJECT_ID 
                    paramsMap['subnetwork_project'] = env.SUBNETWORK_PROJECT
                    paramsMap['source_image_name'] = env.SOURCE_IMAGE_NAME
                    paramsMap['source_image_project'] = env.SOURCE_IMAGE_PROJECT
                    paramsMap['gce_ssh_pub_key_file'] = env.GCE_SSH_PUB_KEY_FILE
                    paramsMap['gce_ssh_user'] = env.SSH_USER
                    paramsMap['sap_boot_disk_size'] = env.SAP_BOOT_DISK_SIZE
                    paramsMap['sap_boot_disk_type'] = env.SAP_BOOT_DISK_TYPE
                    paramsMap['sap_autodelete_boot_disk'] = env.SAP_AUTODELETE_BOOT_DISK ? env.SAP_AUTODELETE_BOOT_DISK : true
                    paramsMap['sap_data_disk_size'] = env.SAP_DATA_DISK_SIZE
                    paramsMap['sap_data_disk_type'] = env.SAP_DATA_DISK_TYPE
                    paramsMap['sap_log_disk_size'] = env.SAP_LOG_DISK_SIZE
                    paramsMap['sap_log_disk_type'] = env.SAP_LOG_DISK_TYPE
                    paramsMap['sap_shared_disk_size'] = env.SAP_SHARED_DISK_SIZE
                    paramsMap['sap_shared_disk_type'] = env.SAP_SHARED_DISK_TYPE
                    paramsMap['sap_usrsap_disk_size'] = env.SAP_USRSAP_DISK_SIZE
                    paramsMap['sap_usrsap_disk_type'] = env.SAP_USRSAP_DISK_TYPE
                    paramsMap['sap_swap_disk_size'] = env.SAP_SWAP_DISK_SIZE
                    paramsMap['sap_swap_disk_type'] = env.SAP_SWAP_DISK_TYPE
                    paramsMap['sap_service_account_email'] = env.SAP_SERVICE_ACCOUNT_EMAIL 
                    paramsMap['sap_network_tags'] = [env.SAP_NETWORK_TAGS]
                    paramsMap['sap_pd_kms_key'] = env.SAP_PD_KMS_KEY
                    paramsMap['sap_hana_password'] = env.sap_hana_password

                    writeFile file: "${env.FOLDER}/tf/terraform.tfvars.json", text: JsonOutput.toJson(paramsMap)

                    sh """
                        echo "Terraform TFVARS File..."
                        cat ${env.FOLDER}/tf/terraform.tfvars.json
                    """
                }
            }
        }



        stage('Terraform Plan and Approve') {
            steps {
                script {
                    def bucketId = "${env.TERRAFORM_BUCKET_ID}"
                    def prefixId = "${env.TERRAFORM_PREFIX_ID}"

                    if (!bucketId || !prefixId) {
                        error "Bucket and prefix ID not found for ${FOLDER}"
                    }

                    echo "Executing Terraform init and plan in ${FOLDER}/tf with backend bucket=${bucketId}, prefix=${prefixId}"

                    withCredentials([file(credentialsId: 'gcp-key-new', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                    dir("${FOLDER}/tf") {
                                        sh """
                                            terraform init \\
                                                -backend-config="bucket=${bucketId}" \\
                                                -backend-config="prefix=${prefixId}" \\
                                                -reconfigure
                                        """

                                        // Capture Terraform plan output into a file
                                        sh "terraform plan -var-file=terraform.tfvars.json -compact-warnings | tee terraform-plan.log"

                                        
                        }
                    
                    def approverEmail = 'priya.harsha724@gmail.com'
                    def subject = "Approval Required: Terraform Execution"
                    def logFilePath = "${FOLDER}/tf/terraform-plan.log"

                    // Read Terraform Plan Output and truncate if too long
                    def planOutput = readFile(logFilePath)
                    // .take(5000) // Limits email size

                    def body = """
                        <p>Terraform execution is requested. Please review and approve or reject.</p>
                        
                        <p><b>Job:</b> ${env.JOB_NAME}<br>
                        <b>Build Number:</b> ${env.BUILD_NUMBER}<br>
                        <b>URL:</b> <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>

                        <p><b>Terraform Plan Output (truncated):</b></p>
                        <pre>${planOutput}</pre>

                        <p><b>Approval Options:</b></p>
                        <ul>
                            <li><a href="${env.BUILD_URL}/input">✅ Approve Job</a></li>
                            <li><a href="${env.BUILD_URL}/abort">❌ Reject Job</a></li>
                        </ul>
                    """

                    mail(
                        to: approverEmail,
                        subject: subject,
                        body: body,
                        mimeType: 'text/html'
                    )
                    }


                    input message: "Do you want to proceed with Terraform Configuration Deployment?", ok: "Proceed"

                    withCredentials([file(credentialsId: 'gcp-key-new', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                        dir("${FOLDER}/tf") {
                            sh "terraform apply -auto-approve -var-file=\"terraform.tfvars.json\""
                        }
                    }

                    sh """
                        echo "Fetching Terraform state file from GCS..."
                        gsutil cat gs://${env.TERRAFORM_BUCKET_ID}/${env.TERRAFORM_PREFIX_ID}/default.tfstate
                    """
                }
            }
        }


        stage('Prepare Host Inventory') {
            steps {
                script {
                    dir("${FOLDER}/tf") {
                        echo "Extracting Terraform output for ${FOLDER}"

                        // Get Terraform JSON output
                        def terraformOutput = sh(script: 'terraform output -json', returnStdout: true).trim()
                        def jsonOutput = readJSON(text: terraformOutput)

                        // Debugging Terraform output
                        echo "Parsed JSON Output: ${jsonOutput}"

                        // Extract inventory
                        def inventoryList = jsonOutput.inventory?.value ?: []
                        def instanceName = jsonOutput.instance_name?.value ?: "unknown-instance"

                        if (inventoryList.isEmpty() || instanceName == "unknown-instance") {
                            error "Error: 'inventory' or 'instance_name' is empty"
                        }

                        // Extract group name and single host
                        def groupName = inventoryList[0]?.groups[0] ?: "default-group"
                        def host = inventoryList[0]?.host ?: "unknown-host"

// Build correct YAML format
def yamlContent = """all:
  children:
    ${groupName}:
      hosts:
        ${host}:
          instance_name: ${instanceName}
"""

                        // Write YAML file
                        def yamlFilePath = "${env.WORKSPACE}/${env.FOLDER}/inventory.yml"
                        writeFile file: yamlFilePath, text: yamlContent
                        echo "Inventory YAML file created at ${yamlFilePath}"

                        // Print output
                        dir("${env.WORKSPACE}/${env.FOLDER}") {
                            sh "cat inventory.yml"
                        }
                    }
                }
            }
        }


        stage('Manual Approval for Ansible Execution') {
            steps {
                input message: "Do you want to proceed with Ansible Execution ?", ok: "Proceed"
            }
        }

        stage('Prepare Ansible Input Vars File') {
            steps {
                script {

                    def yamlContent = """
                        sap_project_id: ${params.project_id}
                        sap_hana_backint_install: ${env.sap_hana_backint_install}
                        sap_hana_backint_bucket_name: ${env.sap_hana_backint_bucket_name}
                        sap_hana_dr_shared_disk_size: ${params.sap_shared_disk_size}
                        sap_hana_dr_data_disk_size: ${params.sap_data_disk_size}
                        sap_hana_dr_log_disk_size: ${params.sap_log_disk_size}
                        sap_hana_dr_usrsap_disk_size: ${params.sap_usrsap_disk_size}
                        sap_ssh_user: ${env.SSH_USER}
                        sap_host_fqdn: ${env.sap_host_fqdn}
                        sap_hana_fast_restart: ${env.sap_hana_fast_restart}
                        sap_hana_sid: ${params.sap_hana_sid}
                        sap_zone: ${params.sap_zone}
                        sap_hana_password: ${env.sap_hana_password}
                    """.stripIndent()

                        // sap_hana_instance_number: ${env.sap_hana_instance_number}
                    
                    sh "mkdir -p ${env.FOLDER}/vars"

                    writeFile file: "${env.FOLDER}/vars/deploy-vars.yml", text: yamlContent
                    
                }
            }
        }

        stage('Wait for SSH Connection to All Hosts') {
            steps {
                script {
                    def connectedHosts = [] as Set  // Use a Set to avoid duplicates
                    def retryCount = 0
                    def maxRetries = 5  // Maximum retry attempts
                    def retryDelay = 40 // Delay between retries (seconds)

                    // Read the inventory.yml file as YAML
                    def inventoryData = readYaml file: "${FOLDER}/inventory.yml"
                    def inventoryHosts = []

                    // Navigate through YAML to extract host IPs
                    if (inventoryData?.all?.children?.hana?.hosts) {
                        inventoryHosts = inventoryData.all.children.hana.hosts.keySet().toList()
                    } else {
                        error "No hosts found in inventory.yml!"
                    }

                    echo "Hosts from inventory: ${inventoryHosts}"

                    def sshUser = env.SSH_USER
                    echo "Using SSH User: ${sshUser}"

                    while (connectedHosts.size() < inventoryHosts.size() && retryCount < maxRetries) {
                        def remainingHosts = inventoryHosts - connectedHosts  // Hosts that still need checking

                        for (host in remainingHosts) {
                            echo "Attempting SSH connection to ${sshUser}@${host}, try #${retryCount + 1}"
                            def result = sh(script: "ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 ${sshUser}@${host} 'exit'", returnStatus: true)

                            if (result == 0) {
                                echo "SSH connection successful for ${host}"
                                connectedHosts.add(host)
                            } else {
                                echo "SSH connection failed for ${host}. Moving to the next host..."
                            }
                        }

                        retryCount++
                        if (connectedHosts.size() < inventoryHosts.size() && retryCount < maxRetries) {
                            sleep(retryDelay)
                        }
                    }

                    // Fail if any hosts remain unreachable
                    if (connectedHosts.size() < inventoryHosts.size()) {
                        error "Failed to connect to some hosts after ${maxRetries} attempts: ${(inventoryHosts - connectedHosts)}"
                    } else {
                        echo "All hosts are reachable. Proceeding with Ansible playbook execution."
                    }
                }
            }
        }

        
        stage("Execute Ansible"){
            steps {
                script {
                    // Send mail for ansible execution
                    def teamEmail = 'priya.harsha724@gmail.com, santoshisarvagnya@gmail.com'
                    def subject_exe = "Initiation of HANA Scale-Up deployment in SBX environment"

                    def body_exe = """
                        <html>
                        <body>
                            <p>Dear Team,</p>
                            <p>The deployment of <strong>HANA Scale-Up system</strong> in the <strong>Sandbox</strong> environment has been initiated from the Jenkins UI. Please find the build information below:</p>

                            <ul>
                                <li><strong>Job:</strong> ${env.JOB_NAME}</li>
                                <li><strong>Build Number:</strong> ${env.BUILD_NUMBER}</li>
                                <li><strong>Build URL:</strong> <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></li>
                            </ul>

                            <p>Regards,</p>
                        </body>
                        </html>
                    """

                    mail(
                        to: teamEmail,
                        subject: subject_exe,
                        body: body_exe,
                        mimeType: 'text/html'
                    )
                    dir("${FOLDER}") {

                            ansiblePlaybook(
                                disableHostKeyChecking: true,
                                installation: 'Ansible',
                                inventory: "inventory.yml",
                                playbook: "playbook.yml",
                                extras: "-e @vars/${deployvars_filename}",
                                extraVars: [
                                    "ansible_ssh_private_key_file": ANSIBLE_PRIVATE_KEY,
                                    "ansible_user": SSH_USER
                                ]
                            )


                        def yamlContent = """
                            sap_project_id: ${params.project_id}
                            sap_hana_backint_install: ${env.sap_hana_backint_install}
                            sap_hana_backint_bucket_name: ${env.sap_hana_backint_bucket_name}
                            sap_hana_dr_shared_disk_size: ${params.sap_shared_disk_size}
                            sap_hana_dr_data_disk_size: ${params.sap_data_disk_size}
                            sap_hana_dr_log_disk_size: ${params.sap_log_disk_size}
                            sap_hana_dr_usrsap_disk_size: ${params.sap_usrsap_disk_size}
                            sap_ssh_user: ${params.gce_ssh_user}
                            sap_host_fqdn: ${env.sap_host_fqdn}
                            sap_hana_fast_restart: ${env.sap_hana_fast_restart}
                            sap_hana_sid: ${params.sap_hana_sid}
                            sap_hana_instance_number: ${env.sap_hana_instance_number}
                            sap_zone: ${params.sap_zone}
                        """.stripIndent()

                        // writeFile file: DEPLOY_VARS_FILE, text: yamlContent

                        writeFile file: "${env.FOLDER}/vars/deploy-vars.yml", text: yamlContent

            
                    }
                    // Send mail for successful deployment
                    def subject_cmp = "HANA Scale-Up Deployment Successfully Completed in SBX environment"

                    def body_cmp= """
                        <html>
                        <body>
                            <p>Dear Team,</p>

                            <p>The deployment of <strong>HANA Scale-Up</strong> system in the <strong>Sandbox</strong> has been successfully completed. Below are the details of the newly created instance:</p>

                            <table cellspacing="0" cellpadding="5" border="1" style="border-collapse: collapse;">
                                <tr><th align="left">Instance Name</th><td>${params.sap_instance_name}</td></tr>
                                <tr><th align="left">Zone</th><td>${params.sap_zone}</td></tr>
                                <tr><th align="left">Private IP Address</th><td>${params.sap_instance_ip}</td></tr>
                            </table>

                            <p><strong>Build Information:</strong></p>
                            <ul>
                                <li><strong>Job:</strong> ${env.JOB_NAME}</li>
                                <li><strong>Build Number:</strong> ${env.BUILD_NUMBER}</li>
                                <li><strong>Build URL:</strong> <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></li>
                            </ul>

                            <p>Best regards</p>
                        </body>
                        </html>
                    """

                    mail(
                        to: teamEmail,
                        subject: subject_cmp,
                        body: body_cmp,
                        mimeType: 'text/html'
                    )
                }
            }
        }


        stage('Update TF variable file to remove the Password') {
            steps {
                script {
                    def paramsMap = [:]

                    params.each { key, value ->
                        switch (key) {
                            case 'sap_network_tags':
                                try {
                                    paramsMap[key] = readJSON(text: value)
                                } catch (Exception e) {
                                    error("Invalid JSON format for sap_network_tags: ${value}")
                                }
                                break

                            case 'sap_labels':
                                try {
                                    paramsMap[key] = readJSON(text: value)
                                } catch (Exception e) {
                                    error("Invalid JSON format for sap_labels: ${value}")
                                }
                                break

                            case ['sap_addon_disk_name', 'sap_addon_disk_size_gb', 'sap_addon_disk_type']:
                                if (!paramsMap.containsKey('sap_addon_disks')) {
                                    paramsMap['sap_addon_disks'] = [:]
                                }
                                paramsMap['sap_addon_disks']['name'] = [params['sap_addon_disk_name']]
                                paramsMap['sap_addon_disks']['disk_size_gb'] = [params['sap_addon_disk_size_gb'].toInteger()]
                                paramsMap['sap_addon_disks']['disk_type'] = [params['sap_addon_disk_type']]
                                break

                            default:
                                paramsMap[key] = value
                        }
                    }

                    // Add environment variables
                    paramsMap['project_id'] = env.PROJECT_ID 
                    paramsMap['subnetwork_project'] = env.SUBNETWORK_PROJECT
                    paramsMap['source_image_name'] = env.SOURCE_IMAGE_NAME
                    paramsMap['source_image_project'] = env.SOURCE_IMAGE_PROJECT
                    paramsMap['gce_ssh_pub_key_file'] = env.GCE_SSH_PUB_KEY_FILE
                    paramsMap['gce_ssh_user'] = env.SSH_USER
                    paramsMap['sap_boot_disk_size'] = env.SAP_BOOT_DISK_SIZE
                    paramsMap['sap_boot_disk_type'] = env.SAP_BOOT_DISK_TYPE
                    paramsMap['sap_autodelete_boot_disk'] = env.SAP_AUTODELETE_BOOT_DISK ? env.SAP_AUTODELETE_BOOT_DISK : true
                    paramsMap['sap_data_disk_size'] = env.SAP_DATA_DISK_SIZE
                    paramsMap['sap_data_disk_type'] = env.SAP_DATA_DISK_TYPE
                    paramsMap['sap_log_disk_size'] = env.SAP_LOG_DISK_SIZE
                    paramsMap['sap_log_disk_type'] = env.SAP_LOG_DISK_TYPE
                    paramsMap['sap_shared_disk_size'] = env.SAP_SHARED_DISK_SIZE
                    paramsMap['sap_shared_disk_type'] = env.SAP_SHARED_DISK_TYPE
                    paramsMap['sap_usrsap_disk_size'] = env.SAP_USRSAP_DISK_SIZE
                    paramsMap['sap_usrsap_disk_type'] = env.SAP_USRSAP_DISK_TYPE
                    paramsMap['sap_swap_disk_size'] = env.SAP_SWAP_DISK_SIZE
                    paramsMap['sap_swap_disk_type'] = env.SAP_SWAP_DISK_TYPE
                    paramsMap['sap_service_account_email'] = env.SAP_SERVICE_ACCOUNT_EMAIL 
                    paramsMap['sap_network_tags'] = [env.SAP_NETWORK_TAGS]
                    paramsMap['sap_pd_kms_key'] = env.SAP_PD_KMS_KEY

                    writeFile file: "${env.FOLDER}/tf/terraform.tfvars.json", text: JsonOutput.toJson(paramsMap)
                }
            }
        }


        stage('Add the files to Git Repository') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'git-key', variable: 'GIT_SECRET')]) {
                        def timestamp = new Date().format("yyyyMMddHHmmss")
                        def git_folder_name = "${params.sap_hana_sid}_${timestamp}"
                        def target_folder = "${env.FOLDER}/${git_folder_name}"
                        def tfvarsFile = "${env.FOLDER}/tf/terraform.tfvars.json"
                        def inventoryFile = "${env.FOLDER}/inventory.yml"
                        def deployvarsFile = "${env.FOLDER}/vars/deploy-vars.yml"

                        sh """
                            mkdir -p ${target_folder}
                            cp ${tfvarsFile} ${target_folder}/terraform.tfvars.json
                            cp ${inventoryFile} ${target_folder}/inventory.yml
                            cp ${deployvarsFile} ${target_folder}/deploy-vars.yml

                            git config user.name "${GIT_USER_NAME}"
                            git config user.email "${GIT_USER_EMAIL}"

                            git add ${target_folder}
                            git commit -m "Add deployment files for ${git_folder_name}" || echo 'No changes to commit'
                            git push https://${GIT_USER_NAME}:${GIT_SECRET}@${GIT_REPO_URL} HEAD:main
                        """
                    }
                }
            }
        }

    }

    post {
                // Clean after build
                always {
                    cleanWs(cleanWhenNotBuilt: false,
                            deleteDirs: true,
                            disableDeferredWipeout: true,
                            notFailBuild: true)
                }
    }
}
